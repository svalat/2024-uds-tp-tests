-- TODO : 
--       1) Also instrument all dynamic libs
--       2) Get caller address in addition to current function to be similar to -finstrument-function.
--       3) Move enter probe after modification of the stack pointer like -finstrument-function (check use of rsp)
--       4) Check for missing function to get file_path in place of file_name onto function objects.

local out_path = io.popen("pwd"):read("*l");

function udf(obj)
	if(obj:get_demname() ~= nil) then
		-- print("udf : " .. obj:get_demname());
		return obj:get_demname();
	else
		-- print("udf : " .. obj:get_name());
		return obj:get_name();
  end  
end

function fline(obj)
	-- print("fline : "..obj:get_decl_line());
	return obj:get_decl_line();
end

function ffile(obj)
	if(obj:get_src_file_name() == nil) then
		return "??"
	else
		-- print("file : " .. out_path .. "/" .. obj:get_src_file_name());
		return out_path .. "/" .. obj:get_src_file_name();
	end
end

function fid(obj)
	print("fid : " .. obj:get_id());
	return obj:get_id();
end

--print(arg[3]);
this:setRunDir(out_path);
mb = this:addBinaryMain(arg[3]);
mb:setOutputSuffix("_mil.i");
--Instrumentation at function level
fct = mb:addFunction();
--Probe at function entries
e_entries = fct:newEvent("entries");
p_entries = e_entries:newProbeExt("maqao_enter_function","libmalt.so");
p_entries:addParamUser(fid);
p_entries:addParamUser(udf);

--Probe at function entries
e_exits = fct:newEvent("exits");
p_exits = e_exits:newProbeExt("maqao_exit_function","libmalt.so");
p_exits:addParamUser(fid);
p_exits:addParamUser(udf);

--Reg all funcs
e_fentries_ape = p_entries:newEvent("at_program_entry");
p_fentries_ape = e_fentries_ape:newProbeExt("maqao_reg_function","libmalt.so");
p_fentries_ape:addParamUser(fid);
p_fentries_ape:addParamUser(udf);
p_fentries_ape:addParamUser(ffile);
p_fentries_ape:addParamUser(fline);
